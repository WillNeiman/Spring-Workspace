package com.ezen.biz.DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Repository;

import com.ezen.biz.DTO.BoardVO;
import com.ezen.biz.common.JDBCUtil;

@Repository("boardDAO")
public class BoardDAO {
	
	// JDBC 관련 변수
	private Connection conn = null;
	private PreparedStatement pstmt = null;
	private ResultSet rs = null;

	private final String BOARD_LIST_T =	
			"select * from board where title like '%'||?||'%' order by seq desc";
	private final String BOARD_LIST_C =	
			"select * from board where content like '%'||?||'%' order by seq desc";
	
	// CRUD
	// 글 등록
	public void insertBoard(BoardVO board) {
		System.out.println("===> JDBC로 insertBoard() 처리");
		String sql = "insert into board(seq, title, writer, content) " +
				"values(board_seq.NEXTVAL, ?, ?, ? )";
		this.conn = JDBCUtil.getConnection();
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, board.getTitle());
			pstmt.setString(2, board.getWriter());
			pstmt.setString(3, board.getContent());
			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {JDBCUtil.close(pstmt, conn);		
		}
	}
	
	// 글 수정
	public void updateBoard(BoardVO board) {
		System.out.println("===> JDBC로 updateBoard() 처리");
		String sql = "update board set title=?, writer=?, content=? " +
						"where seq=?";
		this.conn = JDBCUtil.getConnection();
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, board.getTitle());
			pstmt.setString(2, board.getWriter());
			pstmt.setString(3, board.getContent());
			pstmt.setInt(4, board.getSeq());
			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {JDBCUtil.close(pstmt, conn);		
		}
	}
	
	// 글 삭제
	public void deleteBoard(BoardVO board) {
		System.out.println("===> JDBC로 deleteBoard() 처리");
		String sql = "delete from board where seq = ?";
		this.conn = JDBCUtil.getConnection();
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, board.getSeq());
			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {JDBCUtil.close(pstmt, conn);		
		}
	}
	
	// 글 상세 조회 - seq 번호에 의한 조회
	public BoardVO getBoard(BoardVO board) {
		System.out.println("===> JDBC로 getBoard() 처리");
		String sql = "select * from board where seq = ?";
		this.conn = JDBCUtil.getConnection();
		BoardVO result = new BoardVO();
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, board.getSeq());
			rs = pstmt.executeQuery();
			if(rs.next()) {				 
				result.setSeq(rs.getInt("SEQ"));
				result.setTitle(rs.getString("TITLE"));
				result.setWriter(rs.getString("WRITER"));
				result.setContent(rs.getString("CONTENT"));
				result.setRegDate(rs.getDate("REGDATE"));
				result.setCnt(rs.getInt("CNT"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {JDBCUtil.close(pstmt, conn, rs);	
		}
		return result;
	}
	
	// 글 목록 조회
	public List<BoardVO> getBoardList(BoardVO vo) {
		System.out.println("===> JDBC로 getBoardList() 처리");
		String sql = "select * from board order by seq desc";
		this.conn = JDBCUtil.getConnection();
		List<BoardVO> boardList = new ArrayList<>();
		try {
			
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			while(rs.next()) {
				BoardVO board = new BoardVO();
				board.setSeq(rs.getInt("SEQ"));
				board.setTitle(rs.getString("TITLE"));
				board.setWriter(rs.getString("WRITER"));
				board.setContent(rs.getString("CONTENT"));
				board.setRegDate(rs.getDate("REGDATE"));
				board.setCnt(rs.getInt("CNT"));
				boardList.add(board);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {JDBCUtil.close(pstmt, conn, rs);	
		}
		return boardList;
	}
}
