package com.ezen.biz;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;

import com.ezen.biz.DTO.BoardVO;
import com.ezen.biz.DTO.UserVO;
import com.ezen.biz.service.BoardService;
import com.ezen.biz.service.UserService;

/**
 * Servlet implementation class DispatcherServlet
 */
public class DispatcherServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    public DispatcherServlet() {
        super();
    }

	protected void doGet(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		process(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		process(request, response);
	}
	
	private void process(HttpServletRequest request, HttpServletResponse response) throws IOException {
		//스프링 컨테이너 초기화
		AbstractApplicationContext container = 
			new GenericXmlApplicationContext("applicationContext.xml");
			
		UserService userService = (UserService) container.getBean("userService");
		BoardService boardService = (BoardService) container.getBean("boardService");
		
		//1.클라이언트의 요청 path 정보 추출
		String uri = request.getRequestURI();
		String path = uri.substring(uri.lastIndexOf("/"));
		System.out.println(path);
		
		//2. 클라이언트의 요청 path에 따라 적절히 분기처리
		if(path.equals("/login.do")) {
			System.out.println("로그인 처리");

			//1. 사용자 입력 정보 추출
			String id = request.getParameter("id");
			String password = request.getParameter("password");
			
			//2. DB 연동 처리
			UserVO vo = new UserVO();
			vo.setId(id);
			vo.setPassword(password);
			
			UserVO user = userService.getUser(vo);
			
			container.close();
			
			//3. 화면 내비게이션
			if(user!=null){
				response.sendRedirect("getBoardList.do");
			} else {
				response.sendRedirect("login.do");
			}
		} else if(path.equals("/logout.do")) {
			System.out.println("로그아웃 처리");
			//1. 브라우저와 연결된 세션 객체를 강제 종료한다.
			HttpSession session = request.getSession();
			session.invalidate();

			//2. 세션 종료 후 메인화면으로 이동
			response.sendRedirect("login.jsp");
		} else if(path.equals("/insertBoard.do")) {
			System.out.println("글 등록 처리");
		} else if(path.equals("/updateBoard.do")) {
			System.out.println("글 수정 처리");
		} else if(path.equals("/deleteBoard.do")) {
			System.out.println("글 삭제 처리");
		} else if(path.equals("/getBoard.do")) {
			System.out.println("글 상세 조회 처리");
		} else if(path.equals("/getBoardList.do")) {
			System.out.println("글 목록 검색 처리");
			//1. 사용자 입력 정보 추출(검색 기능은 나중에 구현)
			//2. DB 연동 처리	
			
			BoardVO vo = new BoardVO();
			List<BoardVO> boardList = boardService.getBoardList();
			
			//3. 응답 화면 구성
			HttpSession session = request.getSession();
			session.setAttribute("boardList", boardList);
			response.sendRedirect("getBoardList.jsp");
		}
	}

}
